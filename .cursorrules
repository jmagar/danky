# Cursor Rules for Danky AI Chatbot

monorepo:
  - "Follow monorepo package boundaries"
  - "No relative imports between packages"
  - "Use workspace dependencies correctly"
  - "Keep shared code in packages/*"
  - "Keep apps in apps/*"
  - "Only global configs at root"
  - "Use proper workspace references"
  - "Follow changesets for versioning"

typescript:
  - "No any types unless absolutely necessary"
  - "Use proper TypeScript types and interfaces"
  - "Use zod for runtime type validation"
  - "Keep files under 300 lines"
  - "Use proper error handling with custom error classes"
  - "Use async/await over raw promises"
  - "Use proper TypeScript path aliases (@/*)"
  - "Maintain strict TypeScript config"
  - "Use proper module resolution"
  - "Keep type definitions clean"

react:
  - "Use Server Components by default"
  - "Add 'use client' only when necessary"
  - "Keep components focused and small"
  - "Use proper prop typing"
  - "Use proper error boundaries"
  - "Follow Next.js App Router patterns"
  - "Keep pages simple, logic in components"
  - "Use proper loading and error states"
  - "Follow React 18 best practices"
  - "Implement proper Suspense boundaries"
  - "Use proper metadata"
  - "Keep client bundles small"
  - "Implement root error boundary for app-wide errors"
  - "Create reusable error boundary components"
  - "Use error boundaries for specific feature sections"
  - "Handle errors gracefully with user-friendly fallbacks"
  - "Properly integrate error boundaries with monitoring tools"
  - "Add shadcn components using pnpm dlx shadcn@latest add"
  - "Never modify shadcn component source files directly"
  - "Create wrapper components for shadcn customizations"
  - "Keep shadcn component variants in theme configuration"
  - "Follow shadcn component composition patterns"

database:
  - "Use Drizzle for all database operations"
  - "Keep schema definitions clean and documented"
  - "Use proper indexes"
  - "Use transactions where necessary"
  - "Proper error handling for DB operations"
  - "Use connection pooling via pgbouncer"
  - "Keep migrations organized"
  - "Use proper schema versioning"
  - "Implement proper constraints"
  - "Follow database naming conventions"
  - "Group related schema definitions"
  - "Use explicit foreign key relationships"
  - "Implement proper migration rollbacks"
  - "Follow semantic versioning for migrations"
  - "Keep migrations atomic and focused"
  - "Use prepared statements for all queries"
  - "Implement proper connection retries and timeouts"

api:
  - "Use proper HTTP status codes"
  - "Validate all inputs with zod"
  - "Proper error responses"
  - "Use Next.js Server Actions where appropriate"
  - "Keep endpoints RESTful"
  - "Document API endpoints"
  - "Implement proper rate limiting"
  - "Use proper caching strategies"
  - "Follow API versioning conventions"
  - "Implement proper security headers"

mcp:
  core:
    - "Follow JSON-RPC 2.0 protocol standards"
    - "Implement proper tool registration and discovery"
    - "Use Zod for schema validation"
    - "Implement proper cleanup functions"
    - "Handle environment variables securely"
    - "Validate all configurations"
    - "Implement proper error handling with custom classes"
    - "Follow concurrent initialization patterns"
    - "Keep tool implementations modular"
    - "Implement proper tool lifecycle management"
    - "Use proper error codes and messages"
    - "Follow proper tool naming conventions"
    - "Implement proper tool versioning"
    - "Document tool capabilities and limitations"
    - "Implement proper rate limiting for LLM calls"
    - "Handle streaming responses correctly"
    - "Implement proper token counting and management"
    - "Handle context window limitations appropriately"

  security:
    - "Secure credential management via .env"
    - "Validate all tool inputs and outputs"
    - "Implement proper access control"
    - "Use secure transport layers"
    - "Follow proper logging practices"
    - "Handle errors gracefully"
    - "Clean up resources properly"
    - "Validate server configurations"
    - "Protect sensitive information"
    - "Follow AI safety guidelines"

  langchain:
    - "Convert MCP servers to LangChain tools correctly"
    - "Implement proper tool binding"
    - "Handle tool execution properly"
    - "Filter and format results appropriately"
    - "Support multiple LLM providers"
    - "Implement proper memory management"
    - "Follow ReAct agent patterns"
    - "Handle tool state properly"
    - "Implement proper fallbacks"
    - "Keep prompts organized and clean"

  config:
    - "Use JSON5 for config files"
    - "Handle environment variable substitution"
    - "Validate all config fields"
    - "Implement proper defaults"
    - "Support multiple server configs"
    - "Handle server-specific settings"
    - "Implement proper cleanup"
    - "Support dynamic configuration"
    - "Follow naming conventions"
    - "Document all options"

testing:
  - "Use Vitest for all tests"
  - "Mock external services"
  - "Test error cases"
  - "Keep tests focused"
  - "Use proper test descriptions"
  - "Implement proper test coverage"
  - "Use proper test fixtures"
  - "Follow testing best practices"
  - "Test edge cases"
  - "Keep tests maintainable"
  - "Implement proper cleanup in tests"
  - "Use proper test organization"
  - "Follow test naming conventions"
  - "Test both success and failure paths"
  - "Implement proper test isolation"
  - "Test streaming responses"
  - "Test LLM interactions"
  - "Implement proper test data factories"

state:
  - "Use Zustand for client state"
  - "Keep stores focused"
  - "Use proper TypeScript types"
  - "Implement proper persistence where needed"
  - "Follow store naming conventions"
  - "Keep state normalized"
  - "Implement proper selectors"
  - "Use proper middleware"
  - "Follow immutability patterns"
  - "Document store structure"
  - "Implement proper store slicing"
  - "Use proper action creators"
  - "Follow proper state update patterns"
  - "Implement proper store composition"
  - "Keep stores minimal and focused"
  - "Handle hydration correctly"
  - "Implement proper state revalidation"

packages:
  - "Keep packages focused"
  - "Maintain clean public APIs"
  - "Proper package documentation"
  - "Follow semantic versioning"
  - "Keep dependencies minimal"
  - "Use proper exports"
  - "Follow package naming conventions"
  - "Implement proper package tests"
  - "Keep package size optimal"
  - "Document breaking changes"
  - "Follow src/types/utils structure"
  - "Implement proper entry points"
  - "Use proper package boundaries"
  - "Follow proper export patterns"
  - "Keep package interfaces clean"

general:
  - "Use proper error tracking with Sentry"
  - "Implement proper logging with Pino"
  - "Follow OpenTelemetry practices"
  - "Keep code DRY"
  - "Use proper commenting"
  - "Follow project structure"
  - "Use proper environment variables"
  - "Follow security best practices"
  - "Keep dependencies updated"
  - "Follow code review guidelines"
  - "Implement proper cleanup functions"
  - "Follow proper error handling patterns"
  - "Use proper type safety"
  - "Follow proper naming conventions"
  - "Keep code modular and reusable" 